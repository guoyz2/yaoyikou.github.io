import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as l,c,a as n,b as a,d as e,e as t}from"./app-d0b2b34c.js";const o={},u=t(`<h1 id="express-gate网关" tabindex="-1"><a class="header-anchor" href="#express-gate网关" aria-hidden="true">#</a> express-gate网关</h1><p>安装express gateway</p><p>npm install -g express-gateway</p><p>创建一个express gateway</p><p>eg gateway create</p><p>根据提示词并选择入门服务模板</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code> ➜ eg gateway create
 ? What is the name of your Express Gateway? my-gateway
 ? Where would you like to install your Express Gateway? my-gateway
 ? What type of Express Gateway do you want to create? (Use arrow keys)
 ❯ Getting Started with Express Gateway
   Basic (default pipeline with proxy)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行express gateway</p><p>cd my-gateway &amp;&amp; npm start</p><h2 id="_5分钟入门导航" tabindex="-1"><a class="header-anchor" href="#_5分钟入门导航" aria-hidden="true">#</a> 5分钟入门导航</h2><p>开始之前，确保已安装express gateway并使用入门服务器模板将其启动</p><p>本导航中，你可以：</p><ol><li>制定微服务并作为api公开</li><li>定义api的消费者</li><li>使用秘钥授权保护api安全</li></ol><p>注：这个网关附带一个内存数据库，作为指南的一部分所做的所有配置文件更改都不需要启动express网关，热重新加载功能将自动处理此问题，无需重新启动</p><h2 id="制定微服务并作为api公开" tabindex="-1"><a class="header-anchor" href="#制定微服务并作为api公开" aria-hidden="true">#</a> 制定微服务并作为api公开</h2>`,15),d={href:"https://httpbin.org/ip",target:"_blank",rel:"noopener noreferrer"},r={href:"https://httpbin.org/ip%E6%9C%8D%E5%8A%A1%EF%BC%8C%E5%B9%B6%E5%B0%86%E5%A4%96%E9%83%A8%E8%AF%B7%E6%B1%82%E4%BD%9C%E4%B8%BA%E6%9C%8D%E5%8A%A1%E7%AB%AF%E7%82%B9%E8%B7%AF%E7%94%B1%E5%88%B0%E5%AE%83",target:"_blank",rel:"noopener noreferrer"},m=n("ol",null,[n("li",null,"cd config"),n("li",null,"打开 gateway.comfig.yml 并找到定义了httpbin的服务端点的 serviceEndpoint 部分"),n("li",null,"接下来在默认流水线的代理策略中查找httpbin serviceEndpoint")],-1),k=n("li",null,[a("我们将通过express gateway 将httpbin服务公开为api端点，当api通过api端点公开时，可以从外部访问API "),n("ol",null,[n("li",null,"打开 gateway.comfig.yml"),n("li",null,"找到定义了名为“api”的API端点的apiEndpoints部分")])],-1),v=t(`<p>​ 注：默认情况下，代理策略会将API请求的路径附加到服务端点</p><ol start="4"><li>现在我们有了一个端点，他能通过express gateway访问api</li></ol><h2 id="定义api的消费者" tabindex="-1"><a class="header-anchor" href="#定义api的消费者" aria-hidden="true">#</a> 定义api的消费者</h2><ol><li><p>为了管理我们的API，我们将定义被称为“消费者”的授权用户，允许他们使用API。</p></li><li><p>使用eg users create 创建用户</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>eg users create
Configuring yargs through package.json is deprecated and will be removed in a future major release, please use the JS API instead.
Configuring yargs through package.json is deprecated and will be removed in a future major release, please use the JS API instead.
Configuring yargs through package.json is deprecated and will be removed in a future major release, please use the JS API instead.
? Enter firstname [required]: guo
? Enter lastname [required]: yz
? Enter username [required]: guoyz
? Enter email: 78300406@qq.com
? Enter redirectUri: undefined
√ Created 22de903f-3087-4df2-84b2-e8c0def22d81
{
  &quot;isActive&quot;: true,
  &quot;username&quot;: &quot;guoyz&quot;,
  &quot;id&quot;: &quot;22de903f-3087-4df2-84b2-e8c0def22d81&quot;,
  &quot;firstname&quot;: &quot;guo&quot;,
  &quot;lastname&quot;: &quot;yz&quot;,
  &quot;email&quot;: &quot;78300406@qq.com&quot;,
  &quot;createdAt&quot;: &quot;Sat Aug 26 2023 23:17:58 GMT+0800 (中国标准时间)&quot;,
  &quot;updatedAt&quot;: &quot;Sat Aug 26 2023 23:17:58 GMT+0800 (中国标准时间)&quot;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="使用秘钥授权保护api" tabindex="-1"><a class="header-anchor" href="#使用秘钥授权保护api" aria-hidden="true">#</a> 使用秘钥授权保护api</h2><ol><li>目前api已完全公开，并可以通过其api端点进行访问，我们现在要用秘钥授权来保护它，为此，我们将秘钥授权策略添加到了默认流水线中</li><li>给guoyz分配一个密钥 <ol><li>eg credentials create -c guoyz -t key-auth -q</li></ol></li></ol><h2 id="核心概念" tabindex="-1"><a class="header-anchor" href="#核心概念" aria-hidden="true">#</a> 核心概念</h2><p>有关Express Gateway及其工作方式的概述，请查看“关于”页面，熟悉Express Gateway中的核心实体及其使用方式。</p><p>Express Gateway具有以下核心实体</p><h3 id="endpoints" tabindex="-1"><a class="header-anchor" href="#endpoints" aria-hidden="true">#</a> endpoints</h3><p>端点是URL。Express Gateway有两种不同类型的端点：</p><ul><li><p>API endpoints</p></li><li><p>Service endpoints</p></li></ul><p>Express Gateway通过API endpoints公开API。作为网关，它将来自API端点的API请求代理到服务端点中引用的微服务。</p><h2 id="policies-reference-策略参考" tabindex="-1"><a class="header-anchor" href="#policies-reference-策略参考" aria-hidden="true">#</a> Policies Reference（策略参考）</h2><p>策略是Express Gateway中功能的构建块。策略可以被视为Express中间件的包装器，通过以下方式添加动态评估和执行行为：</p><ul><li><p>条件</p></li><li><p>行动</p></li><li><p>参数</p></li></ul><p>一个策略可以有一个或多个条件和操作对。一个条件和一个动作都可以有自己的一组唯一参数，使这对参数是唯一的。</p><p>可以使用Express Gateway公开的JavaScript对象和函数对策略进行高度定制。JavaScript对象和函数可以在条件、操作和参数中指定，以动态执行逻辑。</p><p>有关如何在条件、操作和策略（如表达式策略）中指定逻辑的信息，请参阅策略自定义参考。</p><h3 id="basic-authorization" tabindex="-1"><a class="header-anchor" href="#basic-authorization" aria-hidden="true">#</a> Basic Authorization</h3><p>基本授权策略遵循RFC-7617标准。根据标准，如果用户代理想要发送用户id和密码，它将使用以下HTTP头。</p><p>示例: Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==</p><h4 id="用法" tabindex="-1"><a class="header-anchor" href="#用法" aria-hidden="true">#</a> 用法</h4><ol><li><p>为了使用基本授权策略，必须创建使用者并为其创建基本身份验证凭据。</p></li><li><p>要创建使用者（用户和应用程序）：请使用CLI并创建用户或创建应用程序命令。</p></li><li><p>要为应用程序或用户创建基本身份验证凭据：请使用CLI并键入basic auth的create credential命令。</p></li><li><p>要启用基本授权策略，请在policys部分的gateway.config.yml中添加基本授权。</p></li></ol><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">policies</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> basic<span class="token punctuation">-</span>auth
  <span class="token comment"># 其他策略</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="customization-自定义策略" tabindex="-1"><a class="header-anchor" href="#customization-自定义策略" aria-hidden="true">#</a> Customization（自定义策略）</h3><p>Express Gateway的动态功能源于一组丰富的自定义功能，这些功能将Express.js中间件与可以使用纯JavaScript指定的表达式和逻辑相结合。</p><h4 id="conditions-条件" tabindex="-1"><a class="header-anchor" href="#conditions-条件" aria-hidden="true">#</a> Conditions（条件）</h4><p>条件控制Express Gateway操作的执行流程。Express Gateway提供了一组丰富的核心条件，可用于Express Gateway中的任何策略。整个Express Gateway共享的应用程序数据存储在JavaScript对象中，可以使用JavaScript表达式和函数进行评估。</p><h4 id="express-gateway-context-object-egcontext-网关上下文对象" tabindex="-1"><a class="header-anchor" href="#express-gateway-context-object-egcontext-网关上下文对象" aria-hidden="true">#</a> Express Gateway Context Object (egContext)（网关上下文对象）</h4><p>状态和其他应用程序数据和元数据存储在Express Gateway上下文对象或egContext对象中。上下文对象及其相关属性会根据执行范围而更改。</p><p>示例</p><p>在流水线1中，调用API端点的用户将在egContext.user.id中设置其用户id数据，该数据与调用同一API端点的另一用户不同。尽管它是同一个对象，但运行时上下文会创建同一对象和数据的不同实例。</p><h4 id="egcontext" tabindex="-1"><a class="header-anchor" href="#egcontext" aria-hidden="true">#</a> egContext</h4><p>将用于执行条件、操作和表达式策略中的JavaScript代码的JavaScript沙盒对象。它可以用于实现非标准场景。</p><p>由于安全原因，所有Node.JS全局变量（如process、require等）都将不可用。</p><p>egContext包含以下可使用的属性：</p><ul><li>req:ExpressJS请求对象</li><li>res:ExpressJS响应对象</li><li>apiEndpoint：正在执行的配置或API端点。例如，apiEndpoint.scopes将为端点提供所有配置的作用域</li><li>consumer：关于当前消费者的信息（可以是应用程序或用户）</li><li>requestID:uuidv4（base62编码）当前请求的标识符，用于跟踪目的。如果需要，可以使用headers策略将此值作为header向下传播。</li><li>requestStream：如果设置了，则此流将通过流水线传输到代理的请求主体中，而不是原始请求主体中。这可以实现有趣的场景。</li></ul><h2 id="cli-reference-命令行参考" tabindex="-1"><a class="header-anchor" href="#cli-reference-命令行参考" aria-hidden="true">#</a> CLI Reference (命令行参考)</h2><h2 id="plugins-插件" tabindex="-1"><a class="header-anchor" href="#plugins-插件" aria-hidden="true">#</a> plugins (插件)</h2><p>Express Gateway v1.2.0+附带了一个插件框架，用于扩展Express Gateway核心。插件框架允许任何人使用Express中间件并将它们作为插件集成到Express网关中。Express Gateway提供了一种声明性的方式来利用Express中间件进行集中驱动和动态执行。</p><p>注意：使用此框架，Express Gateway核心中的现有策略最终将从核心重构为Express Gateway插件。</p><h4 id="插件结构" tabindex="-1"><a class="header-anchor" href="#插件结构" aria-hidden="true">#</a> 插件结构</h4><p>Express网关插件包含实体并允许事件订阅。您可以将插件看作Express网关实体的容器，这些实体通过添加实体和提供事件处理程序来扩展核心。</p><p>在插件框架的第一次迭代中，支持以下实体：</p><ul><li>Policies-策略</li><li>Conditions-条件</li><li>为admin 和 gateway服务自定义路由和中间件</li></ul><p>对于所有考虑中的扩展点，请参考Express Gateway插件规范。</p><p>插件框架公开了一个事件总线，可以对Express网关生命周期中的事件做出反应。</p><h4 id="自动插件安装" tabindex="-1"><a class="header-anchor" href="#自动插件安装" aria-hidden="true">#</a> 自动插件安装</h4><h4 id="插件不在npm上-自定义插件" tabindex="-1"><a class="header-anchor" href="#插件不在npm上-自定义插件" aria-hidden="true">#</a> 插件不在NPM上（自定义插件）</h4><p>在插件不在NPM上的罕见情况下（如果您有专用代码存储库，则可能会发生这种情况），您可以使用特定插件部分的package属性指定确切的入口点：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">plugins</span><span class="token punctuation">:</span>
   <span class="token key atrule">example</span><span class="token punctuation">:</span> <span class="token comment"># &quot;express-gateway-plugin-example&quot;</span>
      <span class="token key atrule">param1</span><span class="token punctuation">:</span> <span class="token string">&#39;global per plugin param1&#39;</span>
      <span class="token key atrule">package</span><span class="token punctuation">:</span> <span class="token string">&#39;../manifest.js&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="plugin-development-插件开发" tabindex="-1"><a class="header-anchor" href="#plugin-development-插件开发" aria-hidden="true">#</a> Plugin Development（插件开发）</h3><h4 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a></h4><h3 id="policy-development-策略开发" tabindex="-1"><a class="header-anchor" href="#policy-development-策略开发" aria-hidden="true">#</a> Policy Development（策略开发）</h3><h4 id="定义策略" tabindex="-1"><a class="header-anchor" href="#定义策略" aria-hidden="true">#</a> 定义策略</h4><p>该策略是ExpressJS中间件的包装器</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">.</span><span class="token operator">/</span>policies<span class="token operator">/</span>example<span class="token operator">-</span>policy<span class="token punctuation">.</span>js文件里的内容
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;example&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">schema</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">$id</span><span class="token operator">:</span> <span class="token string">&quot;http://express-gateway.io/schemas/policies/example-policy.json&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;object&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">properties</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">baseUrl</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">format</span><span class="token operator">:</span> <span class="token string">&quot;url&quot;</span><span class="token punctuation">,</span>
        <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">&quot;https://example.com&quot;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">policy</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">actionParams</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>
        <span class="token string">&quot;executing policy-from-example-plugin with params&quot;</span><span class="token punctuation">,</span>
        actionParams
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用下一个策略</span>
      <span class="token comment">// 或者写入响应:  res.json({result: &quot;this is the response&quot;})</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>name-策略的名称，这是在流水线中引用策略的方式</p><p>schema-在执行策略时将用于验证的JSON schema。</p><p>policy-返回ExpressJS中间件的函数。函数接受actionParams。actionParams是该策略管道中的所有配置选项</p><h4 id="action-参数" tabindex="-1"><a class="header-anchor" href="#action-参数" aria-hidden="true">#</a> Action 参数</h4><p>假设您将流水线定义为：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">pipelines</span><span class="token punctuation">:</span>
  <span class="token key atrule">apiPipeline</span><span class="token punctuation">:</span>
    <span class="token key atrule">apiEndpoints</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> api
    <span class="token key atrule">policies</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">example</span><span class="token punctuation">:</span>
          <span class="token punctuation">-</span> <span class="token key atrule">action</span><span class="token punctuation">:</span>  <span class="token comment"># action 中的所有内容都将是 actionParams</span>
              <span class="token key atrule">baseUrl</span><span class="token punctuation">:</span> <span class="token string">&#39;https://example.com&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这种情况下，当构建流水线时，您的策略将具有actionParams是</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;baseUrl&quot;</span><span class="token operator">:</span><span class="token string">&quot;https://example.com&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="使用插件导出策略" tabindex="-1"><a class="header-anchor" href="#使用插件导出策略" aria-hidden="true">#</a> 使用插件导出策略</h4><p>现在是时候在插件初始化期间注册策略了：这是在manifest.js init函数中完成的</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">version</span><span class="token operator">:</span> <span class="token string">&#39;1.2.0&#39;</span><span class="token punctuation">,</span>
  <span class="token function-variable function">init</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">pluginContext</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token keyword">let</span> policy <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./policies/example-policy&#39;</span><span class="token punctuation">)</span>
     pluginContext<span class="token punctuation">.</span><span class="token function">registerPolicy</span><span class="token punctuation">(</span>policy<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="策略注册和执行顺序" tabindex="-1"><a class="header-anchor" href="#策略注册和执行顺序" aria-hidden="true">#</a> 策略注册和执行顺序</h4><p>综合来看，我们在插件中看到了策略的三个主要组成部分：</p><ul><li>pluginContext.registerPolicy-将策略注册为插件的一部分</li><li>（actionParams）=&gt;ExpressJS_Middleware_Function-从管道配置提供参数的包装器</li><li>（req，res，next）=&gt;｛…｝-标准ExpressJS中间件</li></ul><p>主要区别在于执行这些部分的时间</p><h5 id="plugincontext-registerpolicy" tabindex="-1"><a class="header-anchor" href="#plugincontext-registerpolicy" aria-hidden="true">#</a> <code>pluginContext.registerPolicy</code></h5><ul><li>在Express Gateway启动时执行。在流水线引擎和http服务器启动之前。</li><li>仅执行一次</li></ul><h5 id="actionparams-expressjs-middleware-function-封装器" tabindex="-1"><a class="header-anchor" href="#actionparams-expressjs-middleware-function-封装器" aria-hidden="true">#</a> <code>(actionParams) =&gt; ExpressJS_Middleware_Function</code> 封装器</h5><ul><li>当流水线引擎将yml转换为ExpressJS中间件时执行。</li><li>在每次配置更改时执行（热重新加载gateway.config文件）</li></ul><h5 id="req-res-next-中间件" tabindex="-1"><a class="header-anchor" href="#req-res-next-中间件" aria-hidden="true">#</a> <code>(req,res,next) =&gt; { ... }</code> 中间件</h5><ul><li>对当前流水线中的每个请求执行</li></ul><h2 id="geteway-config-yml文件解析" tabindex="-1"><a class="header-anchor" href="#geteway-config-yml文件解析" aria-hidden="true">#</a> geteway.config.yml文件解析</h2><p>定义并描述了网关的所有功能，此配置文件简要描述了整个网关的微服务和API操作</p><h3 id="http" tabindex="-1"><a class="header-anchor" href="#http" aria-hidden="true">#</a> http</h3><p>配置http，express gateway 网关将在指定端口上监听 http 请求</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">http</span><span class="token punctuation">:</span>
    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">9080</span>            <span class="token comment"># 在9080上监听请求</span>
    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> localhost
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="https" tabindex="-1"><a class="header-anchor" href="#https" aria-hidden="true">#</a> https</h3><p>配置https，express gateway 网关将在指定端口上监听 https 请求</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">https</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">9443</span>
  <span class="token key atrule">hostname</span><span class="token punctuation">:</span> localhost
  <span class="token key atrule">tls</span><span class="token punctuation">:</span>  <span class="token comment"># 密钥证书对</span>
    <span class="token key atrule">&quot;*.demo.io&quot;</span><span class="token punctuation">:</span>
        <span class="token key atrule">key</span><span class="token punctuation">:</span> example/keys/demo.io.key.pem
        <span class="token key atrule">cert</span><span class="token punctuation">:</span> example/keys/demo.io.cert.pem
    <span class="token key atrule">&quot;api.acme.com&quot;</span><span class="token punctuation">:</span>
        <span class="token key atrule">key</span><span class="token punctuation">:</span> example/keys/acme.com.key.pem
        <span class="token key atrule">cert</span><span class="token punctuation">:</span> example/keys/acme.com.cert.pem
    <span class="token key atrule">&quot;default&quot;</span><span class="token punctuation">:</span>
        <span class="token key atrule">key</span><span class="token punctuation">:</span> example/keys/eg.io.key.pem
        <span class="token key atrule">cert</span><span class="token punctuation">:</span> example/keys/eg.io.cert.pem
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>express gateway支持TLS，包括SNI（特定于域的TLS证书），每个tls密钥都可以指定一个主机域，主机域匹配支持通配符。TLS密钥和证书的路径在密钥与证书密钥中成对制定</p><p>如果其他tls域条目都不匹配，或者客户端没有使用SNI，则将使用默认密钥。</p><h3 id="admin" tabindex="-1"><a class="header-anchor" href="#admin" aria-hidden="true">#</a> admin</h3><p>admin部分是admin REST API的内部端点。Express Gateway将在指定的主机和端口上侦听内部API请求</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">admin</span><span class="token punctuation">:</span>
    <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost
    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">9080</span>            <span class="token comment"># EG will listen for http requests on port 9080</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="apiendpoints" tabindex="-1"><a class="header-anchor" href="#apiendpoints" aria-hidden="true">#</a> apiEndpoints</h3><p>Express Gateway通过称为apiEndpoints的URL将微服务公开为API。API消费者可以通过API端点进行API请求。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">apiEndpoints</span><span class="token punctuation">:</span>
  <span class="token key atrule">help</span><span class="token punctuation">:</span>                 <span class="token comment"># 名称，用作流水线中的引用</span>
    <span class="token key atrule">host</span><span class="token punctuation">:</span> <span class="token string">&#39;*&#39;</span>           <span class="token comment"># 必填项, &#39;*&#39; 将不会检查主机名</span>
    <span class="token key atrule">paths</span><span class="token punctuation">:</span> /help        <span class="token comment"># 选填，默认情况下将为所有请求提供服务，与 * 类似</span>

  <span class="token key atrule">api</span><span class="token punctuation">:</span>                  <span class="token comment"># 名称，用作流水线中的引用</span>
    <span class="token key atrule">host</span><span class="token punctuation">:</span> <span class="token string">&#39;*.com&#39;</span>       <span class="token comment"># 支持通配符模式</span>
    <span class="token key atrule">paths</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">&#39;/v1/*&#39;</span>         <span class="token comment"># 字符串或字符串数组</span>
      <span class="token punctuation">-</span> <span class="token string">&#39;/v2/*&#39;</span>

  <span class="token key atrule">example</span><span class="token punctuation">:</span>              <span class="token comment"># 名称，用作流水线中的引用</span>
    <span class="token key atrule">host</span><span class="token punctuation">:</span> <span class="token string">&#39;example.com&#39;</span>
    <span class="token key atrule">paths</span><span class="token punctuation">:</span> /v2/*        <span class="token comment"># 字符串或字符串数组</span>

  <span class="token key atrule">example2</span><span class="token punctuation">:</span>              <span class="token comment"># 可以在同一apiEndpoint中提供一组匹配条件</span>
    <span class="token punctuation">-</span> <span class="token key atrule">host</span><span class="token punctuation">:</span> <span class="token string">&#39;example2.com&#39;</span>
      <span class="token key atrule">paths</span><span class="token punctuation">:</span> /v2/*
      <span class="token key atrule">methods</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;GET&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;OPTIONS&quot;</span><span class="token punctuation">]</span>   <span class="token comment"># 匹配的方法</span>
      <span class="token key atrule">scopes</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;example2:read&quot;</span><span class="token punctuation">]</span>

    <span class="token punctuation">-</span> <span class="token key atrule">host</span><span class="token punctuation">:</span> <span class="token string">&#39;example2.com&#39;</span>
      <span class="token key atrule">paths</span><span class="token punctuation">:</span> /v2/*
      <span class="token key atrule">methods</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;PUT&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;POST&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;PATCH&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;DELETE&quot;</span><span class="token punctuation">]</span>
      <span class="token key atrule">scopes</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;example2:write&quot;</span><span class="token punctuation">]</span>    <span class="token comment"># 访问此类资源所需的作用域数组</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="配置" tabindex="-1"><a class="header-anchor" href="#配置" aria-hidden="true">#</a> 配置：</h4><table><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>host</code></td><td style="text-align:left;">接受请求的主机名</td></tr><tr><td style="text-align:left;"><code>paths</code></td><td style="text-align:left;">路径数组</td></tr><tr><td style="text-align:left;"><code>methods</code></td><td style="text-align:left;">访问此类资源所需方法数组</td></tr><tr><td style="text-align:left;"><code>scopes</code></td><td style="text-align:left;">访问此类资源所需的作用域数组</td></tr></tbody></table><h4 id="host" tabindex="-1"><a class="header-anchor" href="#host" aria-hidden="true">#</a> Host：</h4><p>host值是一个字符串，将与请求的“host”标头相匹配。</p><p>示例:</p><p>任何域和路径</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">apiEndpoints</span><span class="token punctuation">:</span>
  <span class="token key atrule">help</span><span class="token punctuation">:</span>
    <span class="token key atrule">host</span><span class="token punctuation">:</span> <span class="token string">&#39;*&#39;</span>
    <span class="token key atrule">paths</span><span class="token punctuation">:</span> /help
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>匹配: <code>cdn.test.example.com/help</code>, <code>example.com/help</code>, 没有“HOST”标头404： <code>cdn.test.example.com</code>, <code>example.com/admin</code></p><p>一个没有子域和路径的域</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">apiEndpoints</span><span class="token punctuation">:</span>
  <span class="token key atrule">help</span><span class="token punctuation">:</span>
    <span class="token key atrule">host</span><span class="token punctuation">:</span> <span class="token string">&#39;example.com&#39;</span>
    <span class="token key atrule">paths</span><span class="token punctuation">:</span> /help
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>匹配: <code>example.com/help</code> 404: <code>test.example.com/help</code>, <code>example.com</code></p><p>一个域和路径的任何一级子域</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">apiEndpoints</span><span class="token punctuation">:</span>
  <span class="token key atrule">help</span><span class="token punctuation">:</span>
    <span class="token key atrule">host</span><span class="token punctuation">:</span> <span class="token string">&#39;*.example.com&#39;</span>
    <span class="token key atrule">paths</span><span class="token punctuation">:</span> /help
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="paths" tabindex="-1"><a class="header-anchor" href="#paths" aria-hidden="true">#</a> Paths</h4>`,109),h={href:"https://expressjs.com/en/4x/api.html#router",target:"_blank",rel:"noopener noreferrer"},b=t(`<p>示例</p><p>精确字符串匹配</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">paths</span><span class="token punctuation">:</span> /admin
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>匹配: 只有<code>/admin</code></li><li>404: <code>/admin/bob</code>; <code>/admin/charlie/1</code>; <code>/staff</code></li></ul><hr><p>没有父级的深层匹配</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">paths</span><span class="token punctuation">:</span> /admin/*
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>匹配: <code>/admin/bob</code>; <code>/admin/charlie/1</code></li><li>404: <code>/admin</code></li></ul><hr><p>带有父级的深层匹配</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">paths</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;/admin&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;/admin/*&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>匹配: <code>/admin</code>; <code>/admin/bob</code>; <code>/admin/charlie/1</code></li><li>404: <code>/staff</code></li></ul><hr><p>一级匹配，无父级，变量赋值</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">paths</span><span class="token punctuation">:</span> <span class="token string">&#39;/admin/:id&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>匹配: <code>/admin/bob</code>; <code>/admin/charlie</code></li><li>id: <code>bob</code>; <code>charlie</code></li><li>404: <code>/admin</code>; <code>/staff</code></li></ul><hr><p>具有变量分配的不带父级的多级子目录匹配</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">paths</span><span class="token punctuation">:</span> <span class="token string">&#39;/admin/:group/:id&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>匹配: /admin/ops/bob</li><li>group: ops</li><li>id: bob</li><li>404: /admin; /admin/bob; /admin/alex/bob/charlie</li></ul><hr><p>无父级的多级子目录匹配</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">paths</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;/student/*&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;/teacher/*&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;/admin/*&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>匹配: - <code>/admin/…</code> multi-level - <code>/student/…</code> multi-level - <code>/teacher/…</code> multi-level</li><li>404: - <code>/</code> - <code>/admin</code>; <code>/teacher</code>; <code>/student</code> - <code>/staff</code></li></ul><hr><p>重叠</p><p>API端点指定的顺序很重要。可以通过通配符指定重叠模式。在进行更一般的匹配之前，应首先指定更具体的模式以进行优先级评估。</p><p>示例</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">apiEndpoints</span><span class="token punctuation">:</span>
  <span class="token key atrule">tabby</span><span class="token punctuation">:</span>
    <span class="token key atrule">host</span><span class="token punctuation">:</span> <span class="token string">&#39;*.tabby.cat.com&#39;</span>
    <span class="token key atrule">paths</span><span class="token punctuation">:</span> <span class="token string">&#39;*&#39;</span>                <span class="token comment"># 可选，如果未指定，则默认为*</span>
  <span class="token key atrule">cat</span><span class="token punctuation">:</span>
    <span class="token key atrule">host</span><span class="token punctuation">:</span> <span class="token string">&#39;*.cat.com&#39;</span>
  <span class="token key atrule">com</span><span class="token punctuation">:</span>
    <span class="token key atrule">host</span><span class="token punctuation">:</span> <span class="token string">&#39;*.com&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Scopes</p><p>“scopes”值是一个字符串数组，用于指定当前凭据访问资源所需的作用域。</p><p>示例</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">apiEndpoints</span><span class="token punctuation">:</span>
  <span class="token key atrule">tabby</span><span class="token punctuation">:</span>
    <span class="token key atrule">host</span><span class="token punctuation">:</span> <span class="token string">&#39;*.tabby.cat.com&#39;</span>
    <span class="token key atrule">paths</span><span class="token punctuation">:</span> <span class="token string">&#39;*&#39;</span>
    <span class="token key atrule">scopes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> read
      <span class="token punctuation">-</span> write
      <span class="token punctuation">-</span> delete
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>只有当当前用户具有“读取”、“写入”和“删除”作用域时，才能访问以下api端点。</p><h3 id="serviceendpoints" tabindex="-1"><a class="header-anchor" href="#serviceendpoints" aria-hidden="true">#</a> serviceEndpoints</h3><p>Express Gateway在apiEndpoints上接收API请求，对其进行处理，然后将其代理到下游微服务。serviceEndpoints部分指定了这些代理微服务的URL。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">serviceEndpoints</span><span class="token punctuation">:</span>             <span class="token comment"># 下游微服务</span>
  <span class="token key atrule">cats</span><span class="token punctuation">:</span>                       <span class="token comment"># 名称，用作流水线中的引用</span>
    <span class="token key atrule">url</span><span class="token punctuation">:</span> <span class="token string">&quot;http://cats1.example.com&quot;</span>
  <span class="token key atrule">dogs</span><span class="token punctuation">:</span>                       <span class="token comment"># 名称，用作流水线中的引用</span>
    <span class="token key atrule">urls</span><span class="token punctuation">:</span>                     <span class="token comment"># 多个url可以用于负载均衡</span>
      <span class="token punctuation">-</span> <span class="token string">&quot;http://dogs1.example.com&quot;</span>
      <span class="token punctuation">-</span> <span class="token string">&quot;http://dogs2.example.com&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="配置-1" tabindex="-1"><a class="header-anchor" href="#配置-1" aria-hidden="true">#</a> 配置</h4>`,38),y=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"left"}},"名称"),n("th",{style:{"text-align":"left"}},"描述")])],-1),g=n("tr",null,[n("td",{style:{"text-align":"left"}},[n("code",null,"url")]),n("td",{style:{"text-align":"left"}},"代理请求的协议和主机名")],-1),x=n("tr",null,[n("td",{style:{"text-align":"left"}},[n("code",null,"urls")]),n("td",{style:{"text-align":"left"}},"URL数组，用于负载均衡")],-1),f=n("td",{style:{"text-align":"left"}},[n("code",null,"proxyOptions")],-1),E={style:{"text-align":"left"}},q={href:"https://www.express-gateway.io/docs/policies/proxy/",target:"_blank",rel:"noopener noreferrer"},w=t(`<p>serviceEndpoint必须具有带有单个字符串的url属性或带有字符串数组的urls属性</p><h3 id="policies" tabindex="-1"><a class="header-anchor" href="#policies" aria-hidden="true">#</a> policies</h3><p>策略部分是已启用策略的白名单。必须在此处声明Express Gateway要使用的策略。有关Express Gateway支持的所有策略，请参阅“策略参考&quot;</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">policies</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> cors
  <span class="token punctuation">-</span> rate<span class="token punctuation">-</span>limiter
  <span class="token punctuation">-</span> log
  <span class="token punctuation">-</span> proxy
  <span class="token punctuation">-</span> oauth2
  <span class="token punctuation">-</span> key<span class="token punctuation">-</span>auth
  <span class="token punctuation">-</span> basic<span class="token punctuation">-</span>auth
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置</p><table><thead><tr><th style="text-align:left;">名字</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>name</code></td><td style="text-align:left;">policy的名称，也是<code>/lib/policys下对应的目录名</code></td></tr></tbody></table><h3 id="pipelines" tabindex="-1"><a class="header-anchor" href="#pipelines" aria-hidden="true">#</a> pipelines</h3><p>流水线部分通过请求和响应流将上面部分中声明的所有实体绑定在一起，从而指定核心Express Gateway的操作。</p><p>流水线是为从所有链接的apiEndpoint接收的请求执行的策略的有序列表。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">pipelines</span><span class="token punctuation">:</span>
  <span class="token key atrule">pipeline_1</span><span class="token punctuation">:</span>                   <span class="token comment"># 流水线的名字</span>
    <span class="token key atrule">apiEndpoints</span><span class="token punctuation">:</span>               <span class="token comment"># 按名称引用的 API endpoints</span>
      <span class="token punctuation">-</span> api1                    <span class="token comment"># 示例apiEndpoint名称</span>
      <span class="token punctuation">-</span> api2
      <span class="token punctuation">-</span> api3
    <span class="token key atrule">policies</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span>
        <span class="token punctuation">-</span> policy_1
          <span class="token punctuation">-</span>
            <span class="token comment">#condition/action</span>
          <span class="token punctuation">-</span>
            <span class="token comment">#condition/action</span>
        <span class="token punctuation">-</span> policy_2
          <span class="token punctuation">-</span>
            <span class="token comment">#condition/action</span>
          <span class="token punctuation">-</span>
            <span class="token comment">#condition/action</span>
  pipeline_2
  .
  .
  .
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">http</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">3000</span>

<span class="token key atrule">serviceEndpoints</span><span class="token punctuation">:</span>
  <span class="token key atrule">example</span><span class="token punctuation">:</span> <span class="token comment"># 将在代理策略中引用</span>
    <span class="token key atrule">url</span><span class="token punctuation">:</span> <span class="token string">&#39;http://example.com&#39;</span>

<span class="token key atrule">apiEndpoints</span><span class="token punctuation">:</span>
  <span class="token key atrule">api</span><span class="token punctuation">:</span>
    <span class="token key atrule">host</span><span class="token punctuation">:</span> <span class="token string">&#39;*&#39;</span>
    <span class="token key atrule">paths</span><span class="token punctuation">:</span> /

<span class="token key atrule">pipelines</span><span class="token punctuation">:</span>
  <span class="token key atrule">default</span><span class="token punctuation">:</span>
    <span class="token key atrule">apiEndpoints</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> api
    <span class="token key atrule">policies</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span>
        <span class="token key atrule">simple-logger</span><span class="token punctuation">:</span> <span class="token comment"># 策略名称</span>
          <span class="token punctuation">-</span>   <span class="token comment"># 条件\\动作属性的对象数组</span>
            <span class="token key atrule">condition</span><span class="token punctuation">:</span> <span class="token comment">#可选; 默认为始终执行</span>
              <span class="token key atrule">name</span><span class="token punctuation">:</span> pathExact
              <span class="token key atrule">path</span><span class="token punctuation">:</span> /v1
            <span class="token key atrule">action</span><span class="token punctuation">:</span>
              <span class="token key atrule">message</span><span class="token punctuation">:</span> <span class="token string">&quot;\${req.method} \${req.originalUrl}&quot;</span>
      <span class="token punctuation">-</span>
        <span class="token key atrule">proxy</span><span class="token punctuation">:</span> <span class="token comment"># 策略名称</span>
          <span class="token punctuation">-</span>    <span class="token comment"># 条件\\动作属性的对象数组</span>
            <span class="token key atrule">action</span><span class="token punctuation">:</span>
              <span class="token key atrule">serviceEndpoint</span><span class="token punctuation">:</span> example <span class="token comment"># 见上文声明</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="策略中的条件和动作对象" tabindex="-1"><a class="header-anchor" href="#策略中的条件和动作对象" aria-hidden="true">#</a> 策略中的条件和动作对象</h4><p>策略包含一个带有参数的操作列表。每个操作都可以通过一个条件被控。</p><table><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">必填</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>condition</code></td><td style="text-align:left;">选填</td><td style="text-align:left;">必须满足才能触发其相应操作的规则</td></tr><tr><td style="text-align:left;"><code>action</code></td><td style="text-align:left;"></td><td style="text-align:left;">此特定步骤的操作参数</td></tr></tbody></table><p>条件和操作都有自己的参数列表。每个条件/动作对都是独立于其他条件/动作执行的。执行顺序与策略中的声明相同</p><p>示例</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">pipelines</span><span class="token punctuation">:</span>
  <span class="token key atrule">default</span><span class="token punctuation">:</span>
    <span class="token key atrule">apiEndpoints</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> api
    <span class="token key atrule">policies</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span>
        <span class="token key atrule">simple-logger</span><span class="token punctuation">:</span> <span class="token comment"># 策略名称</span>
          <span class="token punctuation">-</span>   <span class="token comment"># 可由条件选通的操作数组</span>
            <span class="token key atrule">condition</span><span class="token punctuation">:</span> <span class="token comment"># 只有当路径恰好为/v1时，才会执行此操作</span>
              <span class="token key atrule">name</span><span class="token punctuation">:</span> pathExact
              <span class="token key atrule">path</span><span class="token punctuation">:</span> /v1
            <span class="token key atrule">action</span><span class="token punctuation">:</span>
              <span class="token key atrule">message</span><span class="token punctuation">:</span> <span class="token string">&quot;V1: \${req.originalUrl}&quot;</span>
          <span class="token punctuation">-</span>  <span class="token comment"># 仅在上一个操作完成后执行</span>
            <span class="token key atrule">condition</span><span class="token punctuation">:</span> <span class="token comment"># 只有当路径恰好为/v2时才执行此操作</span>
              <span class="token key atrule">name</span><span class="token punctuation">:</span> pathExact
              <span class="token key atrule">path</span><span class="token punctuation">:</span> /v2
            <span class="token key atrule">action</span><span class="token punctuation">:</span>
              <span class="token key atrule">message</span><span class="token punctuation">:</span> <span class="token string">&quot;V2: \${req.originalUrl}&quot;</span>
          <span class="token punctuation">-</span>  <span class="token comment"># 仅在前两个操作完成后执行</span>
            <span class="token key atrule">action</span><span class="token punctuation">:</span> <span class="token comment"># 无条件，始终执行</span>
              <span class="token key atrule">message</span><span class="token punctuation">:</span> <span class="token string">&quot;GENERIC: \${req.method}&quot;</span>
      <span class="token punctuation">-</span>
        <span class="token key atrule">proxy</span><span class="token punctuation">:</span> <span class="token comment"># 策略名称</span>
          <span class="token punctuation">-</span>    <span class="token comment"># 具有条件\\操作属性的对象数组</span>
            <span class="token key atrule">action</span><span class="token punctuation">:</span>
              <span class="token key atrule">serviceEndpoint</span><span class="token punctuation">:</span> example
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,18);function _(P,A){const s=i("ExternalLinkIcon");return l(),c("div",null,[u,n("ol",null,[n("li",null,[a("我们指定现有服务 "),n("a",d,[a("https://httpbin.org/ip"),e(s)]),a(" 代理和管理，就好像它是我们自己从防火墙内发起的一样。该服务允许用户获取get并返回JSON字符串作为输出。它是免费提供的，我们将展示Express Gateway的功能")]),n("li",null,[a("这个服务被指定为express gateway中默认流水线的服务终点，流水线是一组策略，express gateway具有代理策略，使用默认流水线的代理策略，网关现在将位于"),n("a",r,[a("https://httpbin.org/ip服务，并将外部请求作为服务端点路由到它"),e(s)]),m]),k]),v,n("p",null,[a("路径可以是字符串或字符串数组。支持通配符模式。路径遵循ExpressJS路由约定-"),n("a",h,[a("https://expressjs.com/en/4x/api.html#router"),e(s)])]),b,n("table",null,[y,n("tbody",null,[g,x,n("tr",null,[f,n("td",E,[a("用于调用"),n("a",q,[a("proxy-policy"),e(s)]),a("(代理策略)，使用此服务端点")])])])]),w])}const I=p(o,[["render",_],["__file","express-gateway网关.html.vue"]]);export{I as default};
