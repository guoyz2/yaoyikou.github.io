import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as e,c as s,e as i}from"./app-2b248397.js";const n={},r=i(`<h1 id="js" tabindex="-1"><a class="header-anchor" href="#js" aria-hidden="true">#</a> js</h1><h3 id="数组的常用方法" tabindex="-1"><a class="header-anchor" href="#数组的常用方法" aria-hidden="true">#</a> 数组的常用方法</h3><ol><li>push()：向数组末尾添加一个或多个元素，并返回新的数组长度4</li><li>pop()：删除数组最后一个元素，并返回被删除的元素</li><li>shift()：删除数组的第一个元素，并返回被删除的元素，后续元素会向前移动一个位置</li><li>unshift()：像数组开头添加一个或多个元素，并返回新的数组长度，同时，原有元素会后移一个位置</li><li>concat()：将两个或多个数组合并成一个新的数组，并返回该数组</li><li>slice()：返回一个新的数组，包含原数组中指定的部分元素。原数组不会被修改</li><li>splice()：从数组中添加、删除或替换元素，并返回被删除的元素，原数组会被修改</li><li>indexOf()：返回数组中第一个匹配到的元素的索引，如果没有找到则返回-1</li><li>includes()：判断数组中是否包含某个元素，返回一个布尔值</li><li>forEach()：遍历数组并对每个元素执行指定操作</li><li>map()：创建一个新数组，包含对原数组中每个元素执行指定操作后的结果</li><li>filter()：创建一个新数组，包含符合条件的所有元素</li><li>reverse()：反转数组中元素的顺序</li><li>find()：返回数组中满足条件的第一个元素，如果没有找到则返回undefined</li><li>findIndex()：返回数组中满足条件的第一个元素的索引，如果没有找到则返回-1</li><li>some()：检测数组中是否至少有一个元素满足条件，返回一个布尔值</li><li>every()：检测数组中是否所有元素都满足条件，返回一个布尔值</li><li>join()：将数组中的所有元素以指定分割符连接成一个字符串</li></ol><h3 id="如何判断变量的类型" tabindex="-1"><a class="header-anchor" href="#如何判断变量的类型" aria-hidden="true">#</a> 如何判断变量的类型</h3><p>typeof 可以判断一个变量的类型</p><p>使用 typeof 判断数组、对象、null 返回的都是<code>object</code></p><p>可以先使用 Array.isArray(value) 判断是不是数组，然后判断值是否不等于 null，最后就可以确定被判断的值是对象了</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 判断值类型的工具函数</span>
<span class="token keyword">function</span> <span class="token function">judgeType</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> value <span class="token operator">!==</span> <span class="token string">&quot;object&quot;</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">typeof</span> value
    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">&quot;null&quot;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">&quot;array&quot;</span>
    <span class="token keyword">return</span> <span class="token string">&quot;object&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>instanceof 用于判断一个对象是否属于某个构造函数的实例</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 用法:object是对象 constructor 是构造函数</span>
object <span class="token keyword">instanceof</span> <span class="token class-name">constructor</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="javascript中如何终止网络请求" tabindex="-1"><a class="header-anchor" href="#javascript中如何终止网络请求" aria-hidden="true">#</a> JavaScript中如何终止网络请求</h3><h3 id="什么是bom和dom-分别列举一些他们的函数" tabindex="-1"><a class="header-anchor" href="#什么是bom和dom-分别列举一些他们的函数" aria-hidden="true">#</a> 什么是BOM和DOM？分别列举一些他们的函数？</h3><h3 id="深拷贝和浅拷贝有什么区别-js怎么实现深拷贝" tabindex="-1"><a class="header-anchor" href="#深拷贝和浅拷贝有什么区别-js怎么实现深拷贝" aria-hidden="true">#</a> 深拷贝和浅拷贝有什么区别？JS怎么实现深拷贝？</h3><h3 id="如何使用javascript来判断用户设备类型-比如判断是pc访问还是移动端访问" tabindex="-1"><a class="header-anchor" href="#如何使用javascript来判断用户设备类型-比如判断是pc访问还是移动端访问" aria-hidden="true">#</a> 如何使用JavaScript来判断用户设备类型？比如判断是PC访问还是移动端访问？</h3><h3 id="js数组是如何在内存中存储的" tabindex="-1"><a class="header-anchor" href="#js数组是如何在内存中存储的" aria-hidden="true">#</a> JS数组是如何在内存中存储的？</h3><h3 id="js中的map和weakmap有什么区别" tabindex="-1"><a class="header-anchor" href="#js中的map和weakmap有什么区别" aria-hidden="true">#</a> JS中的Map和WeakMap有什么区别？</h3><h3 id="js中怎么阻止事件冒泡和事件默认行为" tabindex="-1"><a class="header-anchor" href="#js中怎么阻止事件冒泡和事件默认行为" aria-hidden="true">#</a> JS中怎么阻止事件冒泡和事件默认行为？</h3><h3 id="什么防抖和节流-如何使用js编码实现" tabindex="-1"><a class="header-anchor" href="#什么防抖和节流-如何使用js编码实现" aria-hidden="true">#</a> 什么防抖和节流？如何使用JS编码实现？</h3><h3 id="什么是虚拟dom-使用虚拟dom一定会更快吗-可以结合vue中的diff算法看一看" tabindex="-1"><a class="header-anchor" href="#什么是虚拟dom-使用虚拟dom一定会更快吗-可以结合vue中的diff算法看一看" aria-hidden="true">#</a> 什么是虚拟DOM？使用虚拟DOM一定会更快吗？(可以结合vue中的diff算法看一看)</h3><h3 id="js-脚本延迟加载的方式有哪些" tabindex="-1"><a class="header-anchor" href="#js-脚本延迟加载的方式有哪些" aria-hidden="true">#</a> JS 脚本延迟加载的方式有哪些？</h3><h3 id="什么是-js-对象的可枚举性-enumerable" tabindex="-1"><a class="header-anchor" href="#什么是-js-对象的可枚举性-enumerable" aria-hidden="true">#</a> 什么是 JS 对象的可枚举性（enumerable）？</h3><h3 id="js-如何顺序执行-10-个异步任务" tabindex="-1"><a class="header-anchor" href="#js-如何顺序执行-10-个异步任务" aria-hidden="true">#</a> JS 如何顺序执行 10 个异步任务？</h3><h3 id="介绍一下-js-中-settimeout-的运行机制" tabindex="-1"><a class="header-anchor" href="#介绍一下-js-中-settimeout-的运行机制" aria-hidden="true">#</a> 介绍一下 JS 中 setTimeout 的运行机制？</h3><h3 id="怎么用-js-实现大型文件上传-要考虑哪些问题" tabindex="-1"><a class="header-anchor" href="#怎么用-js-实现大型文件上传-要考虑哪些问题" aria-hidden="true">#</a> 怎么用 JS 实现大型文件上传？要考虑哪些问题？</h3><h3 id="为什么-js-要被设计为单线程" tabindex="-1"><a class="header-anchor" href="#为什么-js-要被设计为单线程" aria-hidden="true">#</a> 为什么 JS 要被设计为单线程？</h3><h3 id="js-代码中的-use-strict-是什么-有什么作用" tabindex="-1"><a class="header-anchor" href="#js-代码中的-use-strict-是什么-有什么作用" aria-hidden="true">#</a> JS 代码中的 use strict 是什么？有什么作用？</h3><h3 id="如何使用-js-判断某个字符串长度-要求支持-emoji-表情" tabindex="-1"><a class="header-anchor" href="#如何使用-js-判断某个字符串长度-要求支持-emoji-表情" aria-hidden="true">#</a> 如何使用 JS 判断某个字符串长度（要求支持 Emoji 表情）？</h3><h3 id="js-在什么情况下会存在数字精度丢失的问题-如何解决" tabindex="-1"><a class="header-anchor" href="#js-在什么情况下会存在数字精度丢失的问题-如何解决" aria-hidden="true">#</a> JS 在什么情况下会存在数字精度丢失的问题，如何解决？</h3><h3 id="说说你对-typescript-的理解-与-javascript-的区别" tabindex="-1"><a class="header-anchor" href="#说说你对-typescript-的理解-与-javascript-的区别" aria-hidden="true">#</a> 说说你对 TypeScript 的理解？与 JavaScript 的区别？</h3><h3 id="typescript-的内置数据类型有哪些" tabindex="-1"><a class="header-anchor" href="#typescript-的内置数据类型有哪些" aria-hidden="true">#</a> TypeScript 的内置数据类型有哪些？</h3><h3 id="typescript-中的-declare-关键字有什么用" tabindex="-1"><a class="header-anchor" href="#typescript-中的-declare-关键字有什么用" aria-hidden="true">#</a> TypeScript 中的 Declare 关键字有什么用？</h3><h3 id="什么是-typescript-中的命名空间和模块-两者有什么区别" tabindex="-1"><a class="header-anchor" href="#什么是-typescript-中的命名空间和模块-两者有什么区别" aria-hidden="true">#</a> 什么是 TypeScript 中的命名空间和模块？两者有什么区别？</h3><h3 id="es6-有哪些新特性" tabindex="-1"><a class="header-anchor" href="#es6-有哪些新特性" aria-hidden="true">#</a> ES6 有哪些新特性？</h3><ol><li>新增声明命令 let 和 const</li><li>模板字符串</li><li>函数的扩展 <ol><li>函数的默认参数</li><li>箭头函数</li></ol></li><li>对象的扩展 <ol><li>属性的简写，直接写变量</li><li>Object.keys() 方法，获取对象的所有属性名或方法名，返回一个数组</li><li>Object.assign() 方法，将多个源对象的属性和方法合并到目标对象上，接收多个参数，第一个参数是目标对象，后面的都是源对象</li></ol></li><li>for ... of 循环4</li><li>import export</li><li>Promise</li><li>class</li><li>展开运算符<code>...</code></li><li>async、await</li><li>Symbol：一种基本类型，通过调用 symbol 函数产生，接收一个可选名字的参数，返回的symbol是唯一的</li><li>Set：类似数组，所有数据是唯一的，没有重复的值，主要用于去重</li><li>Proxy：使用代理监听对象的操作，然后可以做一些相应的事</li><li>解构赋值</li><li>修饰器@decorator</li></ol><h3 id="es5-中的类和-es6-中的-class-有什么区别" tabindex="-1"><a class="header-anchor" href="#es5-中的类和-es6-中的-class-有什么区别" aria-hidden="true">#</a> ES5 中的类和 ES6 中的 class 有什么区别？</h3><h3 id="什么是-es6-中的-promise-它的使用场景有哪些" tabindex="-1"><a class="header-anchor" href="#什么是-es6-中的-promise-它的使用场景有哪些" aria-hidden="true">#</a> 什么是 ES6 中的 Promise？它的使用场景有哪些？</h3><h3 id="什么是箭头函数-能使用-new-来创建箭头函数么" tabindex="-1"><a class="header-anchor" href="#什么是箭头函数-能使用-new-来创建箭头函数么" aria-hidden="true">#</a> 什么是箭头函数？能使用 new 来创建箭头函数么？</h3><h3 id="es6-中的-reflect-对象有什么用" tabindex="-1"><a class="header-anchor" href="#es6-中的-reflect-对象有什么用" aria-hidden="true">#</a> ES6 中的 Reflect 对象有什么用？</h3><h3 id="eventloop" tabindex="-1"><a class="header-anchor" href="#eventloop" aria-hidden="true">#</a> Eventloop</h3>`,39),t=[r];function d(l,c){return e(),s("div",null,t)}const p=a(n,[["render",d],["__file","js基础.html.vue"]]);export{p as default};
