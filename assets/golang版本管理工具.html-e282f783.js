import{_ as l}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o,c as d,a,b as s,d as e,e as i}from"./app-2b248397.js";const r={},c=i('<h1 id="golang-版本管理工具" tabindex="-1"><a class="header-anchor" href="#golang-版本管理工具" aria-hidden="true">#</a> golang 版本管理工具</h1><h2 id="查看系统架构" tabindex="-1"><a class="header-anchor" href="#查看系统架构" aria-hidden="true">#</a> 查看系统架构</h2><p>windows 系统可以在 cmd 命令行中可以使用 <code>systeminfo</code> 命令</p><figure><img src="https://chart-1253420647.cos.ap-beijing.myqcloud.com/markdown/image-20230813101922085.png" alt="windows查看系统架构" tabindex="0" loading="lazy"><figcaption>windows查看系统架构</figcaption></figure><p>linux 系统使用 <code>uname -a</code> 命令，结果有 x86_64 的是 amd 架构</p><figure><img src="https://chart-1253420647.cos.ap-beijing.myqcloud.com/markdown/image-20230813102800292.png" alt="linux查看系统架构" tabindex="0" loading="lazy"><figcaption>linux查看系统架构</figcaption></figure><h2 id="下载版本管理工具" tabindex="-1"><a class="header-anchor" href="#下载版本管理工具" aria-hidden="true">#</a> 下载版本管理工具</h2>',7),p={href:"https://github.com/voidint/g/releases",target:"_blank",rel:"noopener noreferrer"},u=i(`<h3 id="windows-安装" tabindex="-1"><a class="header-anchor" href="#windows-安装" aria-hidden="true">#</a> windows 安装</h3><p>下载解压之后将解压后的目录添加到系统环境变量中</p><figure><img src="https://chart-1253420647.cos.ap-beijing.myqcloud.com/markdown/image-20230813103930813.png" alt="下载并解压" tabindex="0" loading="lazy"><figcaption>下载并解压</figcaption></figure><figure><img src="https://chart-1253420647.cos.ap-beijing.myqcloud.com/markdown/image-20230813104051229.png" alt="添加到系统环境变量" tabindex="0" loading="lazy"><figcaption>添加到系统环境变量</figcaption></figure><p>打开命令行输入 <code>g</code> 显示一下内容为安装成功</p><figure><img src="https://chart-1253420647.cos.ap-beijing.myqcloud.com/markdown/image-20230813110449510.png" alt="查看工具是否安装成功" tabindex="0" loading="lazy"><figcaption>查看工具是否安装成功</figcaption></figure><h3 id="linux-安装" tabindex="-1"><a class="header-anchor" href="#linux-安装" aria-hidden="true">#</a> linux 安装</h3><p>创建目录</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">mkdir</span> ~/.g
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>切换目录</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> ~/.g
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>创建 bin 目录</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">mkdir</span> bin
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上传二进制文件到 bin 目录下</p><p>解压二进制文件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">tar</span> xzf g1.5.2.linux-amd64.tar.gz
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>所需环境变量写入 ~/.g/env</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">cat</span> <span class="token operator">&gt;</span>~/.g/env <span class="token operator">&lt;&lt;</span><span class="token string">&#39;EOF&#39;
#!/bin/sh
# g shell setup
export GOROOT=&quot;\${HOME}/.g/go&quot;
export PATH=&quot;\${HOME}/.g/bin:\${GOROOT}/bin:$PATH&quot;
export G_MIRROR=https://golang.google.cn/dl/
EOF</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将~/.g/env 导入 shell 环境变量</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">cat</span> <span class="token operator">&gt;&gt;</span>~/.bashrc <span class="token operator">&lt;&lt;</span><span class="token string">&#39;EOF&#39;
# g shell setup
if [ -f &quot;\${HOME}/.g/env&quot; ]; then
    . &quot;\${HOME}/.g/env&quot;
fi
EOF</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启用环境变量</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">source</span> ~/.bashrc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="工具使用" tabindex="-1"><a class="header-anchor" href="#工具使用" aria-hidden="true">#</a> 工具使用</h2><p>查看可供安装的稳定状态的 go 版本</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>g ls-remote stable
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查看可供安装的所有 go 版本</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>g ls-remote
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查看已安装的 go 版本</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>g <span class="token function">ls</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>安装对应版本的 go</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>g install 1.14.7
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>切换 go 版本</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>g use <span class="token number">1.19</span>.10
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>清空 go 安装包文件缓存</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>g clean
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查看 g 版本信息</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>g version <span class="token number">1.5</span><span class="token number">.0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>更新 g 软件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>g self update
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>卸载 g 软件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>g self uninstall
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="单独安装-golang-环境" tabindex="-1"><a class="header-anchor" href="#单独安装-golang-环境" aria-hidden="true">#</a> 单独安装 golang 环境</h2>`,42),g={href:"https://golang.google.cn/dl/",target:"_blank",rel:"noopener noreferrer"},b={href:"https://goproxy.cn/",target:"_blank",rel:"noopener noreferrer"},v=i(`<p>windows:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ go <span class="token function">env</span> <span class="token parameter variable">-w</span> <span class="token assign-left variable">GO111MODULE</span><span class="token operator">=</span>on
$ go <span class="token function">env</span> <span class="token parameter variable">-w</span> <span class="token assign-left variable">GOPROXY</span><span class="token operator">=</span>https://goproxy.cn,direct
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>linux:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token builtin class-name">echo</span> <span class="token string">&quot;export GOROOT=/home/go&quot;</span> <span class="token operator">&gt;&gt;</span> ~/.bashrc
$ <span class="token builtin class-name">echo</span> <span class="token string">&quot;export GOPATH=/home/go&quot;</span> <span class="token operator">&gt;&gt;</span> ~/.bashrc
$ <span class="token builtin class-name">echo</span> <span class="token string">&quot;export PATH=<span class="token environment constant">$PATH</span>:<span class="token variable">$GOROOT</span>/bin:<span class="token variable">$GOPATH</span>/bin&quot;</span> <span class="token operator">&gt;&gt;</span> ~/.bashrc
$ <span class="token builtin class-name">echo</span> <span class="token string">&quot;export GO111MODULE=on&quot;</span> <span class="token operator">&gt;&gt;</span> ~/.bashrc
$ <span class="token builtin class-name">echo</span> <span class="token string">&quot;export GOPROXY=https://goproxy.cn&quot;</span> <span class="token operator">&gt;&gt;</span> ~/.bashrc
$ <span class="token builtin class-name">source</span> ~/.bashrc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>设置 golang 环境变量脚本</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/usr/bin/env sh</span>

<span class="token builtin class-name">set</span> <span class="token parameter variable">-e</span>

<span class="token builtin class-name">echo</span> <span class="token string">&quot;export GOROOT=/home/go&quot;</span> <span class="token operator">&gt;&gt;</span> ~/.bashrc
<span class="token builtin class-name">echo</span> <span class="token string">&quot;export GOPATH=/root/go&quot;</span> <span class="token operator">&gt;&gt;</span> ~/.bashrc
<span class="token builtin class-name">echo</span> <span class="token string">&quot;export PATH=<span class="token environment constant">$PATH</span>:<span class="token variable">$GOROOT</span>/bin:<span class="token variable">$GOPATH</span>/bin&quot;</span> <span class="token operator">&gt;&gt;</span> ~/.bashrc
<span class="token builtin class-name">echo</span> <span class="token string">&quot;export GO111MODULE=on&quot;</span> <span class="token operator">&gt;&gt;</span> ~/.bashrc
<span class="token builtin class-name">echo</span> <span class="token string">&quot;export GOPROXY=https://goproxy.cn&quot;</span> <span class="token operator">&gt;&gt;</span> ~/.bashrc
<span class="token builtin class-name">source</span> ~/.bashrc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6);function h(m,k){const n=t("ExternalLinkIcon");return o(),d("div",null,[c,a("p",null,[s("下载地址："),a("a",p,[s("https://github.com/voidint/g/releases"),e(n)])]),u,a("p",null,[s("安装包下载："),a("a",g,[s("https://golang.google.cn/dl/"),e(n)])]),a("p",null,[s("配置环境变量，切换代理："),a("a",b,[s("https://goproxy.cn/"),e(n)])]),v])}const O=l(r,[["render",h],["__file","golang版本管理工具.html.vue"]]);export{O as default};
