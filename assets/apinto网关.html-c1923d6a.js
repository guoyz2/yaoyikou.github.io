import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as t,c as i,a as n,b as e,d as p,e as c}from"./app-2b248397.js";const r={},l=c(`<h1 id="apinto网关" tabindex="-1"><a class="header-anchor" href="#apinto网关" aria-hidden="true">#</a> apinto网关</h1><h2 id="apinto-debug运行" tabindex="-1"><a class="header-anchor" href="#apinto-debug运行" aria-hidden="true">#</a> apinto Debug运行</h2><h2 id="apinto网关自定义插件" tabindex="-1"><a class="header-anchor" href="#apinto网关自定义插件" aria-hidden="true">#</a> apinto网关自定义插件</h2><p>第一步：</p><p>定义工厂注册方法factory.go</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">const</span> <span class="token punctuation">(</span>
  Name <span class="token operator">=</span> <span class="token string">&quot;response_rewrite&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">Register</span><span class="token punctuation">(</span>register eosc<span class="token punctuation">.</span>IExtenderDriverRegister<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 接受一个名字，一个工厂创建方法</span>
  register<span class="token punctuation">.</span><span class="token function">RegisterExtenderDriver</span><span class="token punctuation">(</span>Name<span class="token punctuation">,</span> <span class="token function">NewFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 定义工厂创建方法</span>
<span class="token keyword">func</span> <span class="token function">NewFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> eosc<span class="token punctuation">.</span>IExtenderDriverFactory <span class="token punctuation">{</span>
  <span class="token comment">// 传递一个插件配置结构体，</span>
  <span class="token keyword">return</span> drivers<span class="token punctuation">.</span>NewFactory<span class="token punctuation">[</span>Config<span class="token punctuation">]</span><span class="token punctuation">(</span>Create<span class="token punctuation">,</span> Check<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在/app/apinto/plugin.go中注册自定义插件</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>customer_plugin<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span>extenderRegister<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>config.go文件</p><p>定义了Config结构体</p><p>定义了Config结构体的错误类型</p><p>定义了config结构体的校验方法</p><ol><li>判断状态码</li><li>判断code数组不能为空</li><li>状态码最大值为598，最小值为200</li></ol><p>driver.go文件</p><ol><li>create方法接受一个id、name、Config类型的值、workers map[eosc.RequireId]eosc.IWorker <ol><li>反悔了一个实现了eosc.IWorker的结构体类型的值，和错误码</li></ol></li><li>check方法是个断言方法，传递泛型和值，返回对应泛型的结构体指针和一个error,开头字母是小写，只在当前go文件中使用</li><li>Check方法 传入Config结构值指针的值、和workers map[eosc.RequireId]eosc.IWorker ,返回一个通过Config.doCheck方法返回的错误</li></ol><p>factory.go文件</p><ol><li>Register()</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>func NewFactory[T any](createFunc func(id, name string, v *T, workers map[eosc.RequireId]eosc.IWorker) (eosc.IWorker, error), configCheckFunc ...func(v *T, workers map[eosc.RequireId]eosc.IWorker) error)
*Factory[T]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>respose-rewrite.go</p><ol><li></li></ol><p>export GOPATH=/root/go</p><p>cd /home/apinto/code/app/apinto/</p><p>go build -gcflags=&quot;all=-N -l&quot; -o apinto</p><p>./apinto debug master</p><p>dlv debug --headless --listen=:2345 --api-version=2 --accept-multiclient</p>`,25),u={href:"http://github.com/app/demo",target:"_blank",rel:"noopener noreferrer"},d=n("p",null,"dlv --listen=:2345 --headless=true --api-version=2 --accept-multiclient exec ./demo.exe",-1);function k(g,m){const a=o("ExternalLinkIcon");return t(),i("div",null,[l,n("p",null,[e('go build -gcflags "all=-N -l" '),n("a",u,[e("github.com/app/demo"),p(a)])]),d])}const b=s(r,[["render",k],["__file","apinto网关.html.vue"]]);export{b as default};
