const e=JSON.parse('{"key":"v-fe438b10","path":"/%E5%B7%A5%E5%85%B7/%E7%BD%91%E5%85%B3/apinto%E7%BD%91%E5%85%B3.html","title":"apinto网关","lang":"zh-CN","frontmatter":{"toc":true,"article":false,"editLink":false,"date":"2023-07-31T00:00:00.000Z","category":["网关","go"],"description":"apinto网关 apinto Debug运行 apinto网关自定义插件 第一步： 定义工厂注册方法factory.go const ( Name = \\"response_rewrite\\" ) func Register(register eosc.IExtenderDriverRegister) { // 接受一个名字，一个工厂创建方法 register.RegisterExtenderDriver(Name, NewFactory()) } // 定义工厂创建方法 func NewFactory() eosc.IExtenderDriverFactory { // 传递一个插件配置结构体， return drivers.NewFactory[Config](Create, Check) }","head":[["meta",{"property":"og:url","content":"https://xianyufs.top/%E5%B7%A5%E5%85%B7/%E7%BD%91%E5%85%B3/apinto%E7%BD%91%E5%85%B3"}],["meta",{"property":"og:site_name","content":"咸鱼要翻身"}],["meta",{"property":"og:title","content":"apinto网关"}],["meta",{"property":"og:description","content":"apinto网关 apinto Debug运行 apinto网关自定义插件 第一步： 定义工厂注册方法factory.go const ( Name = \\"response_rewrite\\" ) func Register(register eosc.IExtenderDriverRegister) { // 接受一个名字，一个工厂创建方法 register.RegisterExtenderDriver(Name, NewFactory()) } // 定义工厂创建方法 func NewFactory() eosc.IExtenderDriverFactory { // 传递一个插件配置结构体， return drivers.NewFactory[Config](Create, Check) }"}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-09-24T03:44:32.000Z"}],["meta",{"property":"article:author","content":"guoyz"}],["meta",{"property":"article:published_time","content":"2023-07-31T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-09-24T03:44:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"apinto网关\\",\\"description\\":\\"apinto网关 apinto Debug运行 apinto网关自定义插件 第一步： 定义工厂注册方法factory.go const ( Name = \\\\\\"response_rewrite\\\\\\" ) func Register(register eosc.IExtenderDriverRegister) { // 接受一个名字，一个工厂创建方法 register.RegisterExtenderDriver(Name, NewFactory()) } // 定义工厂创建方法 func NewFactory() eosc.IExtenderDriverFactory { // 传递一个插件配置结构体， return drivers.NewFactory[Config](Create, Check) }\\"}"]]},"headers":[{"level":2,"title":"apinto Debug运行","slug":"apinto-debug运行","link":"#apinto-debug运行","children":[]},{"level":2,"title":"apinto网关自定义插件","slug":"apinto网关自定义插件","link":"#apinto网关自定义插件","children":[]}],"git":{"createdTime":1695527072000,"updatedTime":1695527072000,"contributors":[{"name":"guoyz","email":"18733972792@163.com","commits":1}]},"readingTime":{"minutes":1.37,"words":410},"filePathRelative":"工具/网关/apinto网关.md","localizedDate":"2023年7月31日","excerpt":"<h1> apinto网关</h1>\\n<h2> apinto Debug运行</h2>\\n<h2> apinto网关自定义插件</h2>\\n<p>第一步：</p>\\n<p>定义工厂注册方法factory.go</p>\\n<div class=\\"language-go line-numbers-mode\\" data-ext=\\"go\\"><pre class=\\"language-go\\"><code><span class=\\"token keyword\\">const</span> <span class=\\"token punctuation\\">(</span>\\n  Name <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"response_rewrite\\"</span>\\n<span class=\\"token punctuation\\">)</span>\\n\\n<span class=\\"token keyword\\">func</span> <span class=\\"token function\\">Register</span><span class=\\"token punctuation\\">(</span>register eosc<span class=\\"token punctuation\\">.</span>IExtenderDriverRegister<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token comment\\">// 接受一个名字，一个工厂创建方法</span>\\n  register<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">RegisterExtenderDriver</span><span class=\\"token punctuation\\">(</span>Name<span class=\\"token punctuation\\">,</span> <span class=\\"token function\\">NewFactory</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">// 定义工厂创建方法</span>\\n<span class=\\"token keyword\\">func</span> <span class=\\"token function\\">NewFactory</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> eosc<span class=\\"token punctuation\\">.</span>IExtenderDriverFactory <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token comment\\">// 传递一个插件配置结构体，</span>\\n  <span class=\\"token keyword\\">return</span> drivers<span class=\\"token punctuation\\">.</span>NewFactory<span class=\\"token punctuation\\">[</span>Config<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">(</span>Create<span class=\\"token punctuation\\">,</span> Check<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{e as data};
